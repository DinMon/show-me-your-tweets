{"version":3,"sources":["contexts/DarkModeContext.js","components/Card.js","components/Toggle.js","components/MenuScreen.js","App.js","serviceWorker.js","index.js"],"names":["DarkModeContext","React","createContext","DarkModeToggleContext","useDarkMode","useContext","DarkModeProvider","children","useState","darkMode","setDarkMode","Provider","value","Card","index","title","textHighlight","description","titleStart","setTitleStart","titleEnd","setTitleEnd","useEffect","split","start","end","className","Toggle","toggleDarkMode","type","checked","name","id","onChange","htmlFor","Menu","App","MenuScreen","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0QAEMA,EAAkBC,IAAMC,gBACxBC,EAAwBF,IAAMC,gBAE7B,SAASE,IACZ,OAAOC,qBAAWL,GAOf,SAASM,EAAT,GAAyC,IAAbC,EAAY,EAAZA,SAAY,EACXC,oBAAS,GADE,mBACpCC,EADoC,KAC1BC,EAD0B,KAO3C,OACI,kBAACV,EAAgBW,SAAjB,CAA0BC,MAAOH,GAC7B,kBAACN,EAAsBQ,SAAvB,CAAgCC,MANxC,WACIF,GAAaD,KAMJF,ICMFM,MA1Bf,YAA0D,EAA3CC,MAA4C,IAArCC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,cACnBP,GADgD,EAAdQ,YACvBb,KADqC,EAGlBI,qBAHkB,mBAG/CU,EAH+C,KAGnCC,EAHmC,OAItBX,qBAJsB,mBAI/CY,EAJ+C,KAIrCC,EAJqC,KAYtD,OANAC,qBAAU,WAAO,IAAD,EACSP,EAAMQ,MAAMP,GADrB,mBACLQ,EADK,KACEC,EADF,KAEZN,EAAcK,GACdH,EAAYI,KACb,IAGC,yBAAKC,UAAU,6BACX,yBAAKA,UAAS,4GACoCjB,EAA+B,kBAApB,oBACzD,yBAAKiB,UAAS,kBAAcjB,EAA6B,gBAAlB,gBAAzB,MACTS,EACD,0BAAMQ,UAAS,mFAA+EjB,EAA6B,gBAAlB,kBAAsCO,GAC9II,MCLNO,MAdf,WACI,IAAMlB,EAAWL,IACXwB,EFKCvB,qBAAWF,GEHlB,OACI,yBAAKuB,UAAU,2CACX,yBAAKA,UAAU,4FACX,2BAAOG,KAAK,WAAWC,QAASrB,EAAUsB,KAAK,SAASC,GAAG,SAASC,SAAUL,EAAgBF,UAAU,yGACxG,2BAAOQ,QAAQ,SAASR,UAAU,sFCanCS,MAnBf,WACI,IAAM1B,EAAWL,IAEjB,OACI,yBAAKsB,UAAS,iCAA6BjB,EAA2B,cAAhB,gBAClD,kBAAC,EAAD,MACA,6BAASiB,UAAU,iCACf,wBAAIA,UAAS,mDAA+CjB,EAA6B,gBAAlB,gBAA1D,MAAb,uBACA,yBAAKiB,UAAS,mCAA+BjB,EAA6B,gBAAlB,gBAA1C,MAAd,kCACA,yBAAKiB,UAAU,wBACX,kBAAC,EAAD,CAAMZ,MAAM,IAAIC,MAAM,sBAAsBC,cAAc,MAAMC,YAAY,4CAC5E,kBAAC,EAAD,CAAMH,MAAM,IAAIC,MAAM,uBAAuBC,cAAc,OAAOC,YAAY,4CAC9E,kBAAC,EAAD,CAAMH,MAAM,IAAIC,MAAM,2BAA2BC,cAAc,WAAWC,YAAY,gDCL3FmB,MARf,WACI,OACI,kBAAC9B,EAAD,KACI,kBAAC+B,EAAD,QCKQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.96605687.chunk.js","sourcesContent":["import React, { useContext, useState} from 'react'\n\nconst DarkModeContext = React.createContext()\nconst DarkModeToggleContext = React.createContext()\n\nexport function useDarkMode() {\n    return useContext(DarkModeContext)\n}\n\nexport function useDarkModeToggle() {\n    return useContext(DarkModeToggleContext)\n}\n\nexport function DarkModeProvider({ children }) {\n    const [darkMode, setDarkMode] = useState(true)\n\n    function toggleDarkMode() {\n        setDarkMode(!darkMode)\n    }\n\n    return (\n        <DarkModeContext.Provider value={darkMode}>\n            <DarkModeToggleContext.Provider value={toggleDarkMode}>\n                {children}\n            </DarkModeToggleContext.Provider>\n        </DarkModeContext.Provider>\n    )\n}","import React, { useEffect, useState } from 'react';\nimport { useDarkMode } from '../contexts/DarkModeContext';\n\nfunction Card({index, title, textHighlight, description}) {\n    const darkMode = useDarkMode()\n\n    const [titleStart, setTitleStart] = useState()\n    const [titleEnd, setTitleEnd] = useState()\n\n    useEffect(() => {\n        const [start, end] = title.split(textHighlight)\n        setTitleStart(start)\n        setTitleEnd(end)\n    }, [])\n\n    return (\n        <div className=\"w-full md:w-1/3 px-6 my-2\">\n            <div className={`h-48 flex justify-center items-center\n                border-solid border-4 rounded-lg shadow-sm ${!darkMode ? 'border-gray-800' : 'border-gray-700'}`}>\n                <div className={`text-lg ${!darkMode ? 'text-gray-800' : 'text-gray-200'} `}>\n                    {titleStart}\n                    <span className={`text-xl hover:text-2xl font-extrabold uppercase underline tracking-wider ${!darkMode ? 'text-gray-900' : 'text-gray-100'}`}>{textHighlight}</span>\n                    {titleEnd}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;\n","import React, { useEffect } from 'react';\nimport { useDarkMode, useDarkModeToggle } from '../contexts/DarkModeContext'\n\nfunction Toggle() {\n    const darkMode = useDarkMode()\n    const toggleDarkMode = useDarkModeToggle()\n\n    return (\n        <div className=\"flex justify-end pt-4 md:pt-12 md:pr-12\">\n            <div className=\"relative inline-block w-20 mr-2 align-middle select-none transition duration-200 ease-in\">\n                <input type=\"checkbox\" checked={darkMode} name=\"toggle\" id=\"toggle\" onChange={toggleDarkMode} className=\"toggle-checkbox absolute block w-8 h-8 rounded-full bg-white border-4 appearance-none cursor-pointer\"/>\n                <label htmlFor=\"toggle\" className=\"toggle-label block overflow-hidden h-8 rounded-full bg-gray-300 cursor-pointer\"></label>\n            </div>\n        </div>\n    )\n}\n\nexport default Toggle","import React from 'react';\nimport Card from './Card'\nimport Toggle from './Toggle'\nimport { useDarkMode } from '../contexts/DarkModeContext'\n\nfunction Menu() {\n    const darkMode = useDarkMode()\n\n    return (\n        <div className={`h-screen overflow-auto ${!darkMode ? 'bg-gray-100' : 'bg-gray-900'}`}>\n            <Toggle />\n            <section className=\"max-w-screen-lg mx-auto pt-20\">\n                <h1 className={`text-5xl font-jura font-bold text-center ${!darkMode ? 'text-gray-900' : 'text-gray-100'} `}>show-me-your-tweets</h1>\n                <div className={`text-center mt-2 sm:mt-0 ${!darkMode ? 'text-gray-600' : 'text-gray-200'} `}>View tweets in different modes</div>\n                <div className=\"flex flex-wrap mt-32\">\n                    <Card index='0' title='show me all you got' textHighlight='all' description='a list of all the tweets showed at once'/> \n                    <Card index='1' title='show me what you got' textHighlight='what' description='a list of all the tweets showed at once'/> \n                    <Card index='2' title='show me how lazy you are' textHighlight='how lazy' description='a list of all the tweets showed at once'/> \n                </div>\n            </section>\n        </div>\n    )\n}\n\nexport default Menu","import React, { useEffect } from 'react';\nimport MenuScreen from './components/MenuScreen'\nimport { DarkModeProvider } from './contexts/DarkModeContext'\n\nfunction App() {\n    return (\n        <DarkModeProvider>\n            <MenuScreen />\n        </DarkModeProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './tailwind.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}