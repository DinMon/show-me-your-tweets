{"version":3,"sources":["contexts/DarkModeContext.js","components/Card.js","components/Toggle.js","components/MenuScreen.js","App.js","serviceWorker.js","index.js"],"names":["DarkModeContext","React","createContext","DarkModeToggleContext","useDarkMode","useContext","DarkModeProvider","children","useState","darkMode","setDarkMode","Provider","value","Card","title","titleHighlight","description","descriptionHighlight","getDividedText","startTitle","highlightTitle","endTitle","startDescrip","highlightDescrip","endDescrip","isFlipped","setIsFlipped","handleFlip","throttle","isFlip","text","highlight","split","className","onMouseOver","onMouseLeave","infinite","Toggle","toggleDarkMode","type","checked","name","id","onChange","htmlFor","Menu","App","path","MenuScreen","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3f3cc265.chunk.js","sourcesContent":["import React, { useContext, useState} from 'react'\n\nconst DarkModeContext = React.createContext()\nconst DarkModeToggleContext = React.createContext()\n\nexport function useDarkMode() {\n    return useContext(DarkModeContext)\n}\n\nexport function useDarkModeToggle() {\n    return useContext(DarkModeToggleContext)\n}\n\nexport function DarkModeProvider({ children }) {\n    const [darkMode, setDarkMode] = useState(true)\n\n    function toggleDarkMode() {\n        setDarkMode(!darkMode)\n    }\n\n    return (\n        <DarkModeContext.Provider value={darkMode}>\n            <DarkModeToggleContext.Provider value={toggleDarkMode}>\n                {children}\n            </DarkModeToggleContext.Provider>\n        </DarkModeContext.Provider>\n    )\n}","import React, { useEffect, useState, useRef } from 'react';\nimport { useDarkMode } from '../contexts/DarkModeContext';\nimport ReactCardFlip from 'react-card-flip'\nimport { throttle } from 'throttle-debounce';\n\nfunction Card({ title, titleHighlight, description, descriptionHighlight}) {\n    const darkMode = useDarkMode()\n\n    const [startTitle, highlightTitle, endTitle] = getDividedText(title, titleHighlight)\n    const [startDescrip, highlightDescrip, endDescrip] = getDividedText(description, descriptionHighlight)\n\n    const [isFlipped, setIsFlipped] = useState(false)\n\n    const handleFlip = throttle(800, false, function flip(isFlip) {\n        setIsFlipped(isFlip)\n    })\n\n    function getDividedText(text, highlight) {\n        const [start, end] = text.split(highlight)\n        return [start, highlight, end]\n    }\n\n    return (\n        <div className=\"w-full md:w-1/3\" onMouseOver={() => handleFlip(true)} onMouseLeave={() => handleFlip(false)}>\n            <ReactCardFlip isFlipped={isFlipped} infinite={true}>\n                <div className=\"w-full px-6 my-2\" >\n                    <div className={`h-48 flex justify-center items-center\n                        border-solid border-4 rounded-lg shadow-sm ${!darkMode ? 'border-gray-800' : 'border-gray-700'}`}>\n                        <div className={`text-lg ${!darkMode ? 'text-gray-800' : 'text-gray-200'} `}>\n                            {startTitle}\n                            <span className={`text-xl font-extrabold uppercase underline tracking-wider ${!darkMode ? 'text-gray-900' : 'text-gray-100'}`}>{highlightTitle}</span>\n                            {endTitle}\n                        </div>\n                    </div>\n                </div>\n                <div className=\"w-full px-6 my-2\">\n                    <div className={`h-48 flex justify-start\n                        border-solid border-4 px-4 py-6 rounded-lg shadow-sm ${!darkMode ? 'border-gray-800' : 'border-gray-700'}`}>\n                        <div className={`text-md ${!darkMode ? 'text-gray-800' : 'text-gray-200'} `}>\n                            {startDescrip}\n                            <span className={`text-md font-extrabold underline ${!darkMode ? 'text-gray-900' : 'text-gray-100'}`}>{highlightDescrip}</span>\n                            {endDescrip}\n                        </div>\n                    </div>\n                </div>\n            </ReactCardFlip>\n        </div>\n    );\n}\n\nexport default Card;\n","import React, { useEffect } from 'react';\nimport { useDarkMode, useDarkModeToggle } from '../contexts/DarkModeContext'\n\nfunction Toggle() {\n    const darkMode = useDarkMode()\n    const toggleDarkMode = useDarkModeToggle()\n\n    return (\n        <div className=\"flex justify-end pt-4 md:pt-12 md:pr-12\">\n            <div className=\"relative inline-block w-20 mr-2 align-middle select-none transition duration-200 ease-in\">\n                <input type=\"checkbox\" checked={darkMode} name=\"toggle\" id=\"toggle\" onChange={toggleDarkMode} className=\"toggle-checkbox absolute block w-8 h-8 rounded-full bg-white border-4 appearance-none cursor-pointer\"/>\n                <label htmlFor=\"toggle\" className=\"toggle-label block overflow-hidden h-8 rounded-full bg-gray-300 cursor-pointer\"></label>\n            </div>\n        </div>\n    )\n}\n\nexport default Toggle","import React from 'react';\nimport Card from './Card'\nimport Toggle from './Toggle'\nimport { useDarkMode } from '../contexts/DarkModeContext'\n\nfunction Menu() {\n    const darkMode = useDarkMode()\n\n    return (\n        <div className={`h-screen overflow-auto ${!darkMode ? 'bg-gray-100' : 'bg-gray-900'}`}>\n            <Toggle />\n            <section className=\"max-w-screen-lg mx-auto pt-20\">\n                <h1 className={`text-5xl font-jura font-bold text-center ${!darkMode ? 'text-gray-900' : 'text-gray-100'} `}>show-me-your-tweets</h1>\n                <div className={`text-center mt-2 sm:mt-0 ${!darkMode ? 'text-gray-600' : 'text-gray-200'} `}>View tweets in different modes</div>\n                <div className=\"flex flex-wrap mt-32\">\n                    <Card title='show me all you got' titleHighlight='all' description='a list of all the tweets showed at once' descriptionHighlight='at once'/> \n                    <Card title='show me what you got' titleHighlight='what' description='a list of all the tweets showed one by one' descriptionHighlight='one by one'/> \n                    <Card title='show me how lazy you are' titleHighlight='how lazy' description='a list of all the tweets showed as you look' descriptionHighlight='as you look'/> \n                </div>\n            </section>\n        </div>\n    )\n}\n\nexport default Menu","import React, { useEffect } from 'react';\nimport MenuScreen from './components/MenuScreen'\nimport { DarkModeProvider } from './contexts/DarkModeContext'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\n\nfunction App() {\n    return (\n        <DarkModeProvider>\n            <BrowserRouter>\n                <Switch>\n                    <Route path=\"/\">\n                        <MenuScreen />\n                    </Route>\n                </Switch>\n            </BrowserRouter>\n        </DarkModeProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './tailwind.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}