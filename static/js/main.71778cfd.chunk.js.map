{"version":3,"sources":["contexts/DarkModeContext.js","components/Card.js","App.js","components/Toggle.js","components/MenuScreen.js","components/Tweet.js","components/SelectedMode.js","serviceWorker.js","index.js"],"names":["DarkModeContext","React","createContext","DarkModeToggleContext","useDarkMode","useContext","DarkModeProvider","children","useState","darkMode","setDarkMode","Provider","value","Card","mode","title","titleHighlight","description","descriptionHighlight","onClick","tweetMode","TweetModeContext","getDividedText","startTitle","highlightTitle","endTitle","startDescrip","highlightDescrip","endDescrip","isFlipped","setIsFlipped","useEffect","handleFlip","throttle","isFlip","text","highlight","split","flipId","onStartImmediate","el","classList","add","onComplete","remove","className","onMouseOver","onMouseLeave","infinite","Toggle","toggleDarkMode","type","checked","name","id","onChange","htmlFor","Menu","toggleTweetMode","useTweetModeToggle","AT_ONCE","ONE_BY_ONE","AS_YOU_LOOK","Tweet","rest","SelectedMode","tweets","setTweets","scrollElem","useRef","onStart","root","slice","apply","querySelectorAll","forEach","style","opacity","anime","targets","querySelector","border","duration","tweetAnim","timeline","easing","translateX","delay","stagger","endDelay","complete","gradualInc","prevDelayedTime","prevCurrentTime","elapseTime","once","scrollAnim","update","anim","scrollTop","scrollHeight","pause","heightSeen","Math","floor","currentTime","animatables","length","delayedTime","window","innerHeight","seek","ref","data-fade-in","xmlns","viewBox","fill","fillRule","d","clipRule","map","tweet","index","key","data-fade-in-tweet","TweetModeToggleContext","App","setTweetMode","modeName","setModeName","flipKey","spring","MenuScreen","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.71778cfd.chunk.js","sourcesContent":["import React, { useContext, useState} from 'react'\n\nconst DarkModeContext = React.createContext()\nconst DarkModeToggleContext = React.createContext()\n\nexport function useDarkMode() {\n    return useContext(DarkModeContext)\n}\n\nexport function useDarkModeToggle() {\n    return useContext(DarkModeToggleContext)\n}\n\nexport function DarkModeProvider({ children }) {\n    const [darkMode, setDarkMode] = useState(true)\n\n    function toggleDarkMode() {\n        setDarkMode(!darkMode)\n    }\n\n    return (\n        <DarkModeContext.Provider value={darkMode}>\n            <DarkModeToggleContext.Provider value={toggleDarkMode}>\n                {children}\n            </DarkModeToggleContext.Provider>\n        </DarkModeContext.Provider>\n    )\n}","import React, { useState, useEffect } from 'react';\nimport { useDarkMode } from '../contexts/DarkModeContext';\nimport { useTweetMode } from '../App';\nimport ReactCardFlip from 'react-card-flip'\nimport { throttle } from 'throttle-debounce';\nimport { Flipped } from 'react-flip-toolkit';\n\nfunction Card({ mode, title, titleHighlight, description, descriptionHighlight, onClick}) {\n    const darkMode = useDarkMode()\n    const tweetMode = useTweetMode()\n\n    const [startTitle, highlightTitle, endTitle] = getDividedText(title, titleHighlight)\n    const [startDescrip, highlightDescrip, endDescrip] = getDividedText(description, descriptionHighlight)\n\n    const [isFlipped, setIsFlipped] = useState(false)\n\n    useEffect(() => {\n        setIsFlipped(false)\n    }, [tweetMode])\n\n    const handleFlip = throttle(800, false, function flip(isFlip) {\n        setIsFlipped(isFlip)\n    })\n\n    function getDividedText(text, highlight) {\n        const [start, end] = text.split(highlight)\n        return [start, highlight, end]\n    }\n\n    function onStartImmediate(el) {\n        el.classList.add('z-10')\n    }\n\n    function onComplete(el) {\n        el.classList.remove('z-10')\n    }\n\n    return (\n        <Flipped flipId={`${mode}-mode`} onStartImmediate={onStartImmediate} onComplete={onComplete}>\n            <div className=\"block w-full h-20 md:w-1/3\" onClick={onClick} onMouseOver={() => handleFlip(true)} onMouseLeave={() => handleFlip(false)}>\n                <ReactCardFlip isFlipped={isFlipped} infinite={true}>\n                    <div className=\"w-full px-6 my-2\" >\n                        <div className={`h-48 flex justify-center items-center\n                            border-solid border-4 rounded-lg shadow-sm ${!darkMode ? 'border-gray-800' : 'border-gray-700'}`}>\n                            <div className={`text-lg ${!darkMode ? 'text-gray-800' : 'text-gray-200'} `}>\n                                {startTitle}\n                                <span className={`text-xl font-extrabold uppercase underline tracking-wider ${!darkMode ? 'text-gray-900' : 'text-gray-100'}`}>{highlightTitle}</span>\n                                {endTitle}\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"w-full px-6 my-2\">\n                        <div className={`h-48 flex justify-start\n                            border-solid border-4 px-4 py-6 rounded-lg shadow-sm ${!darkMode ? 'border-gray-800' : 'border-gray-700'}`}>\n                            <div className={`text-md ${!darkMode ? 'text-gray-800' : 'text-gray-200'} `}>\n                                {startDescrip}\n                                <span className={`text-md font-extrabold underline ${!darkMode ? 'text-gray-900' : 'text-gray-100'}`}>{highlightDescrip}</span>\n                                {endDescrip}\n                            </div>\n                        </div>\n                    </div>\n                </ReactCardFlip>\n            </div>\n        </Flipped>\n    );\n}\n\nexport default Card;\n","import React, { useContext, useState } from 'react';\nimport MenuScreen from './components/MenuScreen'\nimport SelectedMode from './components/SelectedMode'\nimport { DarkModeProvider } from './contexts/DarkModeContext'\nimport { Flipper } from 'react-flip-toolkit'\n\nexport const AT_ONCE = 'at-once'\nexport const ONE_BY_ONE = 'one-by-one'\nexport const AS_YOU_LOOK = 'as-you-look'\n\nconst TweetModeContext = React.createContext()\nconst TweetModeToggleContext = React.createContext()\n\nexport function useTweetMode() {\n    return useContext(TweetModeContext)\n}\n\nexport function useTweetModeToggle() {\n    return useContext(TweetModeToggleContext)\n}\n\nfunction App() {\n    const [tweetMode, setTweetMode] = useState(false)\n    const [modeName, setModeName ] = useState('')\n\n    function toggleTweetMode(mode) {\n        if (!tweetMode) {\n            setModeName(mode)\n        }\n        setTweetMode(!tweetMode)\n    }\n\n    return (\n        <TweetModeContext.Provider value={tweetMode}>\n            <TweetModeToggleContext.Provider value={toggleTweetMode}>\n                <DarkModeProvider>\n                    <Flipper flipKey={tweetMode} spring='veryGentle'>\n                        <MenuScreen />\n                        {\n                            tweetMode ? (\n                                <SelectedMode id={`${modeName}-mode`} mode={modeName}/>\n                            ) : null\n                        }\n                    </Flipper>\n                </DarkModeProvider>\n            </TweetModeToggleContext.Provider>\n        </TweetModeContext.Provider>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport { useDarkMode, useDarkModeToggle } from '../contexts/DarkModeContext'\n\nfunction Toggle() {\n    const darkMode = useDarkMode()\n    const toggleDarkMode = useDarkModeToggle()\n\n    return (\n        <div className=\"flex justify-end pt-4 md:pt-12 md:pr-12\">\n            <div className=\"relative inline-block w-20 mr-2 align-middle select-none transition duration-200 ease-in\">\n                <input type=\"checkbox\" checked={darkMode} name=\"toggle\" id=\"toggle\" onChange={toggleDarkMode} className=\"toggle-checkbox absolute block w-8 h-8 rounded-full bg-white border-4 appearance-none cursor-pointer\"/>\n                <label htmlFor=\"toggle\" className=\"toggle-label block overflow-hidden h-8 rounded-full bg-gray-300 cursor-pointer\"></label>\n            </div>\n        </div>\n    )\n}\n\nexport default Toggle","import React from 'react';\nimport Card from './Card'\nimport Toggle from './Toggle'\nimport { useDarkMode } from '../contexts/DarkModeContext'\nimport { useTweetModeToggle, AT_ONCE, ONE_BY_ONE, AS_YOU_LOOK } from '../App';\n\nfunction Menu() {\n    const darkMode = useDarkMode()\n    const toggleTweetMode = useTweetModeToggle()\n\n    return (\n        <div className={`h-screen ${toggleTweetMode ? 'overflow-hidden' : 'overflow-auto'} ${!darkMode ? 'bg-gray-100' : 'bg-gray-900'}`}>\n            <Toggle />\n            <section className=\"max-w-screen-lg mx-auto pt-20\">\n                <h1 className={`text-5xl font-jura font-bold text-center ${!darkMode ? 'text-gray-900' : 'text-gray-100'} `}>show-me-your-tweets</h1>\n                <div className={`text-center mt-2 sm:mt-0 ${!darkMode ? 'text-gray-600' : 'text-gray-200'} `}>View tweets in different modes</div>\n                <div className=\"flex flex-wrap mt-32\">\n                    <Card onClick={() => toggleTweetMode(AT_ONCE)} mode='at-once' title='show me all you got' titleHighlight='all' description='a list of all the tweets showed at once' descriptionHighlight='at once'/> \n                    <Card onClick={() => toggleTweetMode(ONE_BY_ONE)} mode='one-by-one' title='show me what you got' titleHighlight='what' description='a list of all the tweets showed one by one' descriptionHighlight='one by one'/> \n                    <Card onClick={() => toggleTweetMode(AS_YOU_LOOK)} mode='as-you-look' title='show me how lazy you are' titleHighlight='how lazy' description='a list of all the tweets showed as you look' descriptionHighlight='as you look'/> \n                </div>\n            </section>\n        </div>\n    )\n}\n\nexport default Menu","import React from 'react'\n\nfunction Tweet({ title, className = '', ...rest}) {\n    return (\n        <div {...rest} className={`${className} text-gray-200 font-medium hover:underline rounded-lg mt-1 p-3 hover:bg-gray-800 bg-opacity-25`}>\n            {title}\n        </div>\n    )\n}\n\nexport default Tweet    ","import React, { useEffect, useState, useRef } from 'react'\nimport { useDarkMode } from '../contexts/DarkModeContext';\nimport { useTweetModeToggle, AT_ONCE } from '../App';\nimport { Flipped } from 'react-flip-toolkit'\nimport anime from 'animejs'\nimport Tweet from './Tweet';\n\nfunction SelectedMode({ id, mode }) {\n    const darkMode = useDarkMode()\n    const toggleTweetMode = useTweetModeToggle()\n    const [tweets, setTweets] = useState([])\n\n    const scrollElem = useRef()\n\n    useEffect(() => {\n        setTweets([\n            'Adipisicing ad exercitation id sint culpa ad anim reprehenderit.',\n            'Adipisicing ad exercitation id sint culpa ad anim reprehenderit.',\n            'Adipisicing ad exercitation id sint culpa ad anim reprehenderit.',\n            'Adipisicing ad exercitation id sint culpa ad anim reprehenderit.',\n            'Adipisicing ad exercitation id sint culpa ad anim reprehenderit.',\n            'Adipisicing ad exercitation id sint culpa ad anim reprehenderit.',\n            'Adipisicing ad exercitation id sint culpa ad anim reprehenderit.',\n            'Adipisicing ad exercitation id sint culpa ad anim reprehenderit.',\n            'Adipisicing ad exercitation id sint culpa ad anim reprehenderit.',\n            'Adipisicing ad exercitation id sint culpa ad anim reprehenderit.',\n            'Adipisicing ad exercitation id sint culpa ad anim reprehenderit.',\n            'Adipisicing ad exercitation id sint culpa ad anim reprehenderit.',\n            'Adipisicing ad exercitation id sint culpa ad anim reprehenderit.',\n            'Adipisicing ad exercitation id sint culpa ad anim reprehenderit.',\n            'Adipisicing ad exercitation id sint culpa ad anim reprehenderit.',\n            'Adipisicing ad exercitation id sint culpa ad anim reprehenderit.',\n            'Adipisicing ad exercitation id sint culpa ad anim reprehenderit.',\n            'Adipisicing ad exercitation id sint culpa ad anim reprehenderit.',\n            'Adipisicing ad exercitation id sint culpa ad anim reprehenderit.',\n            'Adipisicing ad exercitation id sint culpa ad anim reprehenderit.',\n        ])\n    }, [])\n\n    function onStart(root) {\n        const elements = [].slice.apply(root.querySelectorAll(\"*[data-fade-in]\"));\n        elements.forEach(el => {\n            el.style.opacity = \"0\"\n        });\n        anime({\n            targets: root.querySelector('div.border-solid'),\n            border: [1, 0],\n            duration: 500\n        })\n    }\n\n    function onComplete(el) {\n        const tweetAnim = anime.timeline({\n            targets: '*[data-fade-in-tweet]',\n            easing: 'easeOutSine',\n        })\n        const backBtnAnim = anime.timeline({\n            targets: '*[data-fade-in]',\n            duration: 400,\n            easing: 'easeOutSine',\n        }).add({\n            targets: '*[data-fade-in]',\n            opacity: [0, 1],\n            translateX: [0, 20],\n            delay: anime.stagger(300),\n        }).add({\n            targets: '*[data-fade-in]',\n            translateX: [20, 0],\n            endDelay: 200,\n            complete: () => {\n                const MAX_INC = 1000\n\n                // Tweak below constant to pace the scroll\n                const INC = 70 // speed up scroll\n                const WAIT_SEC_BEFORE_INC = 300 // decrease to scroll down scroll\n\n                // Tweak below constant if page layout changed\n                const BEFORE_FIRST_TWEET_HEIGHT = 170\n                const TWEET_HEIGHT = 48\n\n                const DELAY_AFTER_TWEET_SHOWED = 1000\n                let gradualInc = INC\n                let prevDelayedTime = 0\n                let prevCurrentTime = 0\n                let elapseTime = 0\n\n                let once = true\n                let scrollAnim = null\n\n                tweetAnim.add({\n                    targets: '*[data-fade-in-tweet]',\n                    opacity: [0, 1],\n                    delay: anime.stagger(80),\n                    update: function(anim) {\n                        if (once) {\n                            scrollAnim = anime({\n                                targets: el,\n                                scrollTop: [0, el.scrollHeight],\n                                duration: anim.duration,\n                                easing: 'easeOutSine',\n                            })\n                            scrollAnim.pause()\n                            once = false\n                        }\n                        const tweetsDisplayed = Math.floor(anim.currentTime / (anim.duration / anim.animatables.length))\n                        const heightSeen = BEFORE_FIRST_TWEET_HEIGHT + (tweetsDisplayed * TWEET_HEIGHT)\n                        const delayedTime = (heightSeen > window.innerHeight) ? anim.currentTime - (DELAY_AFTER_TWEET_SHOWED + gradualInc) : anim.currentTime - DELAY_AFTER_TWEET_SHOWED\n                        scrollAnim.seek((delayedTime > 0) ? delayedTime : prevDelayedTime)\n                        elapseTime += (anim.currentTime - prevCurrentTime)\n                        if ((elapseTime > WAIT_SEC_BEFORE_INC) && (heightSeen > window.innerHeight) && (gradualInc <= MAX_INC)) {\n                            gradualInc += INC\n                            elapseTime = 0\n                        }\n                        prevCurrentTime = anim.currentTime\n                        prevDelayedTime = delayedTime\n                    },\n                    complete: function() {\n                        anime({\n                            targets: el,\n                            scrollTop: 0,\n                            duration: 500,\n                            easing: 'easeOutSine',\n                        })\n                    }\n                })\n            }\n        })\n    }\n\n    return (\n        <Flipped flipId={id} onStart={onStart} onComplete={onComplete}>\n            <div ref={scrollElem} className={`fixed top-0 left-0 w-full h-full overflow-auto\n                ${!darkMode ? ' bg-white' : 'bg-gray-900'}`}>\n                <div className={`h-full border-solid border-4 rounded-lg ${darkMode ? 'border-gray-700' : 'border-gray-800'}`}>\n                    <div className='max-w-screen-lg mx-auto'>\n                        <button onClick={toggleTweetMode} className={`flex justify-start items-center mt-12 ${!darkMode ? 'text-gray-900' : 'text-gray-200'} `} data-fade-in>\n                            <svg className='w-4 h-4' xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                                <path fillRule=\"evenodd\" d=\"M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z\" clipRule=\"evenodd\" />\n                            </svg>    \n                            <div  className='p-1 hover:underline tracking-wide'>\n                                Back\n                            </div>\n                        </button>\n                        <h1 className={`text-3xl font-jura font-bold ${!darkMode ? 'text-gray-900' : 'text-gray-100'} `} data-fade-in>{mode}</h1>\n                        <div className='mt-12'>\n                            {\n                                tweets.map((tweet, index) => (<Tweet key={index} title={tweet} className='opacity-0' data-fade-in-tweet />))\n                            }\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </Flipped>\n    )\n}\n\nexport default SelectedMode","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './tailwind.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}